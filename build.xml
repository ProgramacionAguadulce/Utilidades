<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<!-- By default, only the Clean and Build commands use this build script. -->
<!-- Commands such as Run, Debug, and Test only use this build script if -->
<!-- the Compile on Save feature is turned off for the project. -->
<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
<!-- in the project's Project Properties dialog box.-->
<project name="Utilidades" default="default" basedir=".">
    <description>Builds, tests, and runs the project Utilidades.</description>
    <import file="nbproject/build-impl.xml"/>
    
    
    <target description="Empaqueta los sources en un jar" name="package-sources">
        <echo message="Empaquetando los sources en ${dist.dir}/${dist.srcjar}"/>
        <jar basedir="${src.dir}" destfile="${dist.dir}/${dist.srcjar}"/>
    </target>
    
    <target depends="-javadoc-build" description="Empaqueta los javadoc en un jar" name="package-doc">
        <echo message="Empaquetando los javadoc en ${dist.dir}/${dist.docjar}"/>
        <jar basedir="${dist.javadoc.dir}" destfile="${dist.dir}/${dist.docjar}"/>
    </target>
    
    <!-- Añade información sobre el nombre del proyecto en el archivo MANIFEST.MF -->
    <target name="-pre-init">
        <tstamp>
            <format property="NOW" pattern="yyyy-MM-dd HH:mm:ss z" />
        </tstamp>
        <manifest file="MANIFEST.MF">
            <attribute name="Bundle-Name" value="${project.name}" />           
            <attribute name="Bundle-Version" value="${version.num}" />
            <attribute name="Bundle-Date" value="${NOW}" />
            <!--<attribute name="Bundle-Revision" value="${svna.version}" />-->
            <attribute name="Implementation-Title" value="${project.name}" />
            <attribute name="Implementation-Version" value="${version.num}" />
            <attribute name="Implementation-URL" value="http://www.iesaguadulce.es" />
        </manifest>        
    </target>
    
    <!-- Copia los JavaDoc en para crear el jar-->
    <target name="-post-jar" depends="package-sources, package-doc, package-with-documentation">
        <echo message="Copiando los jars a downloads"/>

        <copy file="${dist.jar}" todir="downloads" />                    
        <copy file="${dist.dir}/${dist.srcjar}" todir="downloads" />
        <copy file="${dist.dir}/${dist.docjar}" todir="downloads" />        
    </target>
    
    <!-- adaptado de https://dzone.com/articles/how-build-fat-jar-using -->
    <target name="package-with-documentation">
        
        <property name="store.jar.name" value="${dist.fulljar}"/>      
        <property name="store.dir" value="downloads"/>
        <property name="store.jar" value="${store.dir}/${store.jar.name}"/>

        <echo message="Empaquetando ${dist.nname} junto a documentación en un solo JAR en la carpeta ${store.jar}"/>
        
        <mkdir dir="${store.dir}"/>

        <jar destfile="${store.dir}/temp_final.jar" filesetmanifest="skip">
            <zipgroupfileset dir="dist" includes="*.jar"/>
            <!-- Para incluir librerías descomentar lo siguiente: -->
            <!--<zipgroupfileset dir="dist/lib" includes="*.jar"/>-->

            <manifest>
                <attribute name="Main-Class" value="${main.class}"/>
            </manifest>
        </jar>

        <zip destfile="${store.jar}">
            <zipfileset src="${store.dir}/temp_final.jar"
            excludes="META-INF/*.SF, META-INF/*.DSA, META-INF/*.RSA"/>
        </zip>

        <delete file="${store.dir}/temp_final.jar"/>

    </target>
    
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar:                  JAR building
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="Utilidades-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 

    -->
    
    
    
</project>
